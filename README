This is a verifier for a simplified java language. This was created for a Object Oriented Programming course 
at university. Regex was the main focus of this project.


########################################            DESIGN            ########################################

main package:
this is the main package, containing the program java files.

Sjavac.java - this class only contains the main method and calls the driver.

Driver.java - this class is the core driver of the program. It does all the heavy lifting of checking the
validity of the code file.

Exceptions - there are many new exception classes we created. later in this readme we explain how we handled
exceptions in our project.

------------------------------------

main.databases package:
this subpackage contains the database classes.

LinesDatabase.java - this class is responsible for reading the sjava file into an arraylist of strings, line
by line. we can then easily get lines by index, and iterate through the lines in order.

MethodsDatabase.java - this class is responsible for holding the database of methods declared in the sjava
file. It holds an arraylist of methods so that we can easily iterate through the methods in the file.

------------------------------------

main.program_components package:
this subpackage contains the program components classes.

Scope.java - this class represents a scope in the code. Therefore it contains a hashmap of variables that
belong to the scope (so that we can easily get variables by name), and it also holds a list of scopes that are
 its "superscopes", the scopes that this scope is nested in. this is so that we can check variables in outer
scopes. the superscopes are in ascending order, so that the most specific scope will be looked at first. the
scope contains a method "checkvalidity" that checks the validity of the scope.

Method.java - this class extends the Scope class. this is because a method is version of a scope. The method
class holds the global variables in its scope. each method instance will be given the global variables
separately so that initializing a global variable in one method doesn't affect it in another method. The
method will also check validity but then finally check that the method ends with a return statement.

Variable.java - this class represents a variable. A variable has 4 elements. A name, a type, a final status,
and a initiated status. only the initiated status can change after the variable instance is created.

Type.java - this enum is for types (of variables). it also contains static methods for getting which types
are accepted assignment for each type.

MissingReturnException.java - Exception class to be thrown when a method does not have a return statement as
its last line.

########################################            TESTS             ########################################

the format is: test_number | test_subject | test_description | test_result

general file structure:
01 | general file structure | pad with \s \t \n everywhere | legal
02 | general file structure | comments | legal
03 | general file structure | comments - beginning with space | illegal
04 | general file structure | comments - after a code line | illegal
05 | general file structure | methods - '{' with declaration | illegal
06 | general file structure | methods - '}' oneliner | illegal
07 | general file structure | comments - doc comment | illegal
08 | general file structure | variables - no operators | illegal

variable names:
09 | variable names | legal names | legal
10 | variable names | starts with digit | illegal
11 | variable names | illegal prefix | illegal
12 | variable names | only underscore | illegal

variable values:
13 | variable values | double - legal examples | legal
14 | variable values | double - only a dot '.' | illegal
15 | variable values | int - legal examples | legal
16 | variable values | boolean - legal examples | legal
17 | variable values | string - legal examples | legal
18 | variable values | string - '...' | illegal
19 | variable values | char - legal examples | legal
20 | variable values | char - "c" | illegal
21 | variable values | char - '' (empty char) | illegal

assignments:
22 | assignments | legal examples | legal
23 | assignments | illegal values | illegal
24 | assignments | illegal values | illegal
25 | assignments | split line | illegal
26 | assignments | undeclared | illegal

scopes:
27 | scopes | glob & loc in same method | legal
28 | scopes | nested scopes | legal
29 | scopes | different scopes | legal
30 | scopes | method & var: same name | legal
31 | scopes | assignment in inner scope | legal
32 | scopes | global assignment | legal
33 | scopes | global assignment only for curr scope | illegal
34 | scopes | same name - globs | illegal
35 | scopes | same name - param | illegal

final:
36 | final | basic | legal
37 | final | assignment when declared | illegal
38 | final | syntax order | illegal
39 | final | changing a final var | illegal

methods:
40 | methods | legal examples | legal
41 | methods | non-void | illegal
42 | methods | illegal name 1 | illegal
43 | methods | illegal name 2 | illegal
44 | methods | return; | illegal
45 | methods | nested method declarations | illegal

whole programs:
46 | whole programs | everything | legal
47 | whole programs | variable focused | legal
