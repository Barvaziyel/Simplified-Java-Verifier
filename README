
########################################            DESIGN            ########################################

main package:
this is the main package, containing the program java files.

Sjavac.java - this class only contains the main method and calls the driver.

Driver.java - this class is the core driver of the program. It does all the heavy lifting of checking the
validity of the code file.

Exceptions - there are many new exception classes we created. later in this readme we explain how we handled
exceptions in our project.

main.databases package:
this subpackage contains the database classes.

LinesDatabase.java - this class is responsible for reading the sjava file into an arraylist of strings, line
by line. we can then easily get lines by index, and iterate through the lines in order.

MethodsDatabase.java - this class is responsible for holding the database of methods declared in the sjava
file. It holds an arraylist of methods so that we can easily iterate through the methods in the file.

main.program_components package:
this subpackage contains the program components classes.

Scope.java - this class represents a scope in the code. Therefore it contains a hashmap of variables that
belong to the scope (so that we can easily get variables by name), and it also holds a list of scopes that are
 its "superscopes", the scopes that this scope is nested in. this is so that we can check variables in outer
scopes. the superscopes are in ascending order, so that the most specific scope will be looked at first. the
scope contains a method "checkvalidity" that checks the validity of the scope.

Method.java - this class extends the Scope class. this is because a method is version of a scope. The method
class holds the global variables in its scope. each method instance will be given the global variables
separately so that initializing a global variable in one method doesn't affect it in another method. The
method will also check validity but then finally check that the method ends with a return statement.

Variable.java - this class represents a variable. A variable has 4 elements. A name, a type, a final status,
and a initiated status. only the initiated status can change after the variable instance is created.

Type.java - this enum is for types (of variables). it also contains static methods for getting which types
are accepted assignment for each type.

MissingReturnException.java - Exception class to be thrown when a method does not have a return statement as
its last line.

########################################            TESTS             ########################################

the format is: test_number | test_subject | test_description | test_result

general file structure:
01 | general file structure | pad with \s \t \n everywhere | legal
02 | general file structure | comments | legal
03 | general file structure | comments - beginning with space | illegal
04 | general file structure | comments - after a code line | illegal
05 | general file structure | methods - '{' with declaration | illegal
06 | general file structure | methods - '}' oneliner | illegal
07 | general file structure | comments - doc comment | illegal
08 | general file structure | variables - no operators | illegal

variable names:
09 | variable names | legal names | legal
10 | variable names | starts with digit | illegal
11 | variable names | illegal prefix | illegal
12 | variable names | only underscore | illegal

variable values:
13 | variable values | double - legal examples | legal
14 | variable values | double - only a dot '.' | illegal
15 | variable values | int - legal examples | legal
16 | variable values | boolean - legal examples | legal
17 | variable values | string - legal examples | legal
18 | variable values | string - '...' | illegal
19 | variable values | char - legal examples | legal
20 | variable values | char - "c" | illegal
21 | variable values | char - '' (empty char) | illegal

assignments:
22 | assignments | legal examples | legal
23 | assignments | illegal values | illegal
24 | assignments | illegal values | illegal
25 | assignments | split line | illegal
26 | assignments | undeclared | illegal

scopes:
27 | scopes | glob & loc in same method | legal
28 | scopes | nested scopes | legal
29 | scopes | different scopes | legal
30 | scopes | method & var: same name | legal
31 | scopes | assignment in inner scope | legal
32 | scopes | global assignment | legal
33 | scopes | global assignment only for curr scope | illegal
34 | scopes | same name - globs | illegal
35 | scopes | same name - param | illegal

final:
36 | final | basic | legal
37 | final | assignment when declared | illegal
38 | final | syntax order | illegal
39 | final | changing a final var | illegal

methods:
40 | methods | legal examples | legal
41 | methods | non-void | illegal
42 | methods | illegal name 1 | illegal
43 | methods | illegal name 2 | illegal
44 | methods | return; | illegal
45 | methods | nested method declarations | illegal

whole programs:
46 | whole programs | everything | legal
47 | whole programs | variable focused | legal

########################################        ERROR HANDLING        ########################################

We decided to handle errors by throwing errors the moment they are discovered. We do this by throwing a
specific type of exception that is most relevant to the error in the code, and by giving the exception
constructor an input of a string that constitutes a message explaining exactly what the problem was. This way
the user can get a more specific and accurate explanation of what the error in the code is. If we were to
throw an 'empty' exception and only where we catch it print a message, we can't know exactly where the error
happened and give a specific error message. The exception is bubbled up the chain until it is finally caught
by the main method. Based on the type of exception caught, a error code is printed (if an IOException is
caught the code '2' is printed, otherwise '1'), followed by the error message.

########################################        PROGRAM DESIGN        ########################################

Firstly we thought of creating an abstract class "Type" and have many different classes "int",
"boolean", etc., inherit from it. Then we could create a TypeFactory. But once we actually worked on the Type
class, we noticed that there really wasn't much substance to it, and creating separate classes for each type
would be pointless. So, we made Type an enum instead with some static functions for differentiating between
the types and their assignment accepted types.

We realized that we would need to keep track of which scope each variable declared belongs to, and that we
would have to keep the scopes in order. therefore, we created the Scope class. Each scope has a hashmap of
its variables, and also a list of superscopes (explained above). Now, while going over a scope, if we reach
another scope that opens inside it, we create a new scope instance, and give it in the constructor "our" list
of superscopes, except we add ourselves ("this") to the beginning of the list. Now, we are the first
superscope for the new scope we created. Everytime a scope looks for a variable, it first checks its own
variables, and then moves on to its superscopes' variables, one by one in ascending order, as is necessary.

Another thing we realized is that a method is a sort of scope, so we made the Method class inherit from the
Scope class. its variables would be the global variables. Also, since changing a global variable in a method
does not change the variable for other methods, we deepcopy the global variables for every method that is
declared.

For the lines of code and for the methods, we decided to create classes that act as databases, and we can
easily add, and get lines and methods from these static databases.

The main outline of the program is 3 stepped:
step 1: read the lines of the sjava file into the LinesDatabase.
step 2: go once over the global statements (variable declarations and assignments), and when encountering a
method declaration, add the method to the MethodDatabase.
step 3: iterate over the methods in the database, and check the validity of the code within each method.

########################################           QUESTIONS          ########################################

Question: How would you modify your code to add new types of variables (e.g., float)?
Answer: All we would need to do is add the type to the Type enum, and within the methods of the enum add a
case for the new type, and finally update the regex of variable declaration prefix to support the new type.

Question: How would you add different methodsâ€™ return types (i.e int foo())?
Answer: Firstly the regex of the method declaration prefix would need to be updated to support the different
types. Secondly, we would give the method class a field "returnType" of type Type, that would hold the return
type of the method. Next, we would need to check that every return statement is followed by a value or
variable of the correct type. We would also create a new exception class "BadReturnTypeException" for when
the wrong type is returned from a function. Finally, we would need to support assignments from function calls
so we would need to allow all assignments to be function calls as well, as long as the function has an
acceptable return type for the receiving variable.

Question: How would you add classes?
Answer: We would add a regex for the class keyword, and we would create within the databases package a class
ClassesDatabase where during the first pass on the global scope we would add any class we come by to the
database. We would create a class Class that contains its own variables (fields) and its own methods. Next,
when declaring a variable, or any time we look for a Type, we would need to check not only for the primitive
types, but also search the ClassesDatabase for the class name. The best way would be to add return types to
methods and each class would have a method that returns a type of the class itself (a constructor). We would
also need to support calling methods and accessing fields of classes using the period character ('.'). If a
class of the name is found in the database, and then a period is found, we then would search the class (from
the database) for a method (if there is also a '(' character after the valid method name) or a field (if no
'(' character).

########################################      REGULAR EXPRESSIONS     ########################################

The most widely used regular expression is - "\\s*;\\s*$"
This regex is saved in a constant named STATEMENT_SUFFIX_REGEX. The regex is a greedy regex, and it
represents a string of any amount of whitespace, followed by a semicolon, followed by any amount of
whitespace, followed by the end of the line. The end of the line is important here, because that means that
after the semicolon, no other character (other than whitespace) is allowed to be in the line. If this regex
is found in a line, we can say for a fact that the line is meant to be a statement.

Another important regular expression we use is - "^\\s*([a-zA-Z]\\w*)\\s*[(]"
This regex is saved in a constant named METHOD_CALL_PREFIX_REGEX. The regex is a greedy regex, and it
represents a string that begins at the start of the line with any amount of whitespace, followed by a
grouping that starts with a letter (uppercase or lowercase), followed by any amount of word characters
(letters, numbers, and underscore), and the grouping closes. Then, we have again any amount of whitespace,
followed by a single '(' character. The grouping in this regex can later be extracted to get a valid method
name. If we find this regex in a line of code, we know that it starts with a method call prefix, since it
starts with a valid method name, and is followed by a open parentheses character.
